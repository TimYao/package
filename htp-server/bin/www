#! /usr/bin/env node

/*
  npm package
    portfinder 随机指定查询端口，并提供基本配置
*/

const { program } = require('commander');
const pkg = require('../package-lock.json');
const serverStart = require('../index');
const defaults = {
  pkgName: pkg.name,
  address: '127.0.0.1',
  port: 3000,
  dir: true,
  index: true
}

program
  .version(pkg.version, '-v, --version')
  .option('-p, --port <type>', 'Default port', defaults.port)
  .option('-a, --address', 'Address to use (defaults to 0.0.0.0)')
  .option('-d, --dir', 'Show directory listings (defaults to true)')
  .option('-i, --index', 'Display autoIndex (defaults to true)')
  .option('-s, --silent', 'Suppress log messages from output')
  .option('-c', 'Cache time (max-age) in seconds [3600], e.g. -c10 for 10 seconds.')
  .option('-t', 'Connections timeout in seconds [120], e.g. -t60 for 1 minute.To disable timeout, use -t0')
  .option('-S, --ssl', 'Enable https.')
  .option('-C, --cert', 'Path to ssl cert file (default: cert.pem).')
  .option('-K, --key', 'Path to ssl key file (default: key.pem).')
  .option('-o, --open', 'open your browser (default to false)')
  .parse(process.argv);



let params = process.argv.slice(2).reduce((p, n, index, argv) => {
  const key = n.includes('-') ? n.slice(1) : '';
  key && (p[key] = argv[index+1])
  return p;
}, {})

params = Object.assign({}, defaults, params);

serverStart(params);

module.exports = params;
